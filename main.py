############################################## –ò–ú–ü–û–†–¢ ##############################################
import asyncio
import os
import segno
import cv2

from aiogram import Dispatcher, Bot, F, html
from aiogram.types import FSInputFile, Message, CallbackQuery
from aiogram.filters import Command

from app import keyboard as kb
from app.keyboard import Keyboard
from app.linkfil import FilterLink

from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from dotenv import load_dotenv

############################################## O–ë–¨–Ø–í–õ–ï–ù–ò–ï –í–ï–î–£–©–ò–• –ö–õ–ê–°–°–û–í ##############################################

load_dotenv()

storage=MemoryStorage()

bot = Bot(os.getenv('TOKEN_API'))
dp = Dispatcher(bot=bot, storage=storage)

kb_code_decode=Keyboard(text=['–°–æ–∑–¥–∞—Ç—å QR –∫–æ–¥üîê', '–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥üîë'], callback=['code','decode'])

class FSMQR(StatesGroup):
    code=State()
    decode=State()



############################################## –ö–û–ú–ê–ù–î–ê –°–¢–ê–†–¢ ##############################################
@dp.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext):

    # –ï–°–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–û–í–´–ô –°–û–ó–î–ê–ï–ú –ü–û–î –ù–ï–ì–û –§–ê–ô–õ –° QR –ö–û–î–û–ú #

    await state.update_data(color='black')

    await (message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}'
                          f'–î–∞–Ω–Ω—ã–π –±–æ—Ç –∫–æ–¥–∏—Ä—É–µ—Ç –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç QR –∫–æ–¥—ã',
                         reply_markup=kb_code_decode.make_inline()))










############################################## –†–ï–ñ–ò–ú –ö–û–î–ò–†–û–í–ê–ù–ò–Ø ##############################################
@dp.callback_query(F.data=='code')
async def color(callback: CallbackQuery, state: FSMContext):

    if not os.path.isdir(f'users/qr{callback.from_user.id}'):
        os.makedirs(f'users/qr{callback.from_user.id}')

    await state.update_data(color='black')

    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await callback.message.answer('–í—ã–±–∏—Ä–∏—Ç–µ —Ü–≤–µ—Ç:', reply_markup=kb.Keyb())
    await state.set_state(FSMQR.code)


#--------------------------------------------- –í–´–ë–û–† –¶–í–ï–¢–ê
@dp.callback_query(FSMQR.code, F.data=='color_y')
async def color(callback: CallbackQuery,state: FSMContext):

    await callback.message.answer('–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É',reply_markup=kb.Keyba())
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await state.update_data(color='yellow')


@dp.callback_query(FSMQR.code, F.data=='color_g')
async def color(callback: CallbackQuery,state: FSMContext):

    await callback.message.answer('–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É',reply_markup=kb.Keyba())
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await state.update_data(color='green')


@dp.callback_query(FSMQR.code, F.data=='color_r')
async def color(callback: CallbackQuery,state: FSMContext):

    await callback.message.answer('–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É', reply_markup=kb.Keyba())
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await state.update_data(color='red')


@dp.callback_query(FSMQR.code, F.data=='color_b')
async def color(callback: CallbackQuery,state: FSMContext):

    await callback.message.answer(f'–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É',reply_markup=kb.Keyba())
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await state.update_data(color='blue')



@dp.callback_query(FSMQR.code,F.data=='color_bl')
async def color(callback: CallbackQuery,state: FSMContext):

    await callback.message.answer(f'–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É',reply_markup=kb.Keyba())
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await state.update_data(color='black')


#--------------------------------------------- –ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î
@dp.callback_query(F.data=='back')
async def back(callback: CallbackQuery):

    await callback.message.answer('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb_code_decode.make_inline())
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)


#--------------------------------------------- –û–¢–ü–†–ê–í–ö–ê QR –ö–û–î–ê
@dp.message(FSMQR.code, FilterLink(mask='http[s]'))
async def code(message: Message, state: FSMContext):
    try:
        # –í–´–ë–û–†–ö–ê –°–°–´–õ–ö–ò –ò–ó –°–û–û–ë–©–ï–ù–ò–Ø #
        current_state = await state.get_data()

        data = {"url": "None"}
        entities = message.entities or []
        for item in entities:
            if item.type in data.keys():
                data[item.type] = item.extract_from(message.text)

        # –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –ò –°–û–•–†–ê–ù–ï–ù–ò–ï QR –ö–û–î–ê –í –°–û–ó–î–ê–ù–ù–£–Æ –î–ò–†–ï–ö–¢–û–†–ò–Æ #
        qr = segno.make(f'{html.quote(data["url"])}')
        qr.save(out=f'users/qr{message.from_user.id}/qr.png' ,dark=current_state.get('color'), scale=5)

        # –î–ê–õ–¨–ù–ï–ô–®–ê–Ø –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø #
        await message.answer_photo(FSInputFile(f'users\qr{message.from_user.id}/qr.png'))
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-1)

    except:
        pass

    finally:
        await message.delete()
        await state.clear()

        os.remove(f"users/qr{message.from_user.id}/qr.png")
        os.rmdir(f"users/qr{message.from_user.id}")

    

#----------------------------------–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(FSMQR.code)
async def all_msg(message: Message):


    await message.reply('–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞')
    await message.delete()
  
    await asyncio.sleep(1)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id+1)







############################################## –†–ï–ñ–ò–ú –î–ï–ö–û–î–ò–†–û–í–ê–ù–ò–Ø ##############################################
@dp.callback_query(F.data=='decode')
async def qr_msg(callback: CallbackQuery, state: FSMContext):

    if not os.path.isdir(f'users/qr{callback.from_user.id}'):
        os.makedirs(f'users/qr{callback.from_user.id}')

    await state.update_data(color='black')
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å QR –∫–æ–¥:', reply_markup=kb.Keyba())
    await state.set_state(FSMQR.decode)
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)



@dp.message(FSMQR.decode, F.photo)
async def decode(message: Message, state: FSMContext):

    await bot.download(message.photo[-1], destination=f'users/qr{message.from_user.id}/qr.png')

    linc=cv2.imread(f'users/qr{message.from_user.id}/qr.png', flags=cv2.IMREAD_GRAYSCALE)
    detector=cv2.QRCodeDetector()
    data,bbox,qr = detector.detectAndDecode(linc)

    try:

        if bbox is None:
            await message.answer('–≠—Ç–æ –Ω–µ QR –∫–æ–¥')
            return
        await message.answer(html.quote(data))

    finally:

        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
        await state.clear()

        os.remove(f"users/qr{message.from_user.id}/qr.png")
        os.rmdir(f"users/qr{message.from_user.id}")


@dp.message(FSMQR.decode)
async def all_msg(message: Message):

    await message.answer("–≠—Ç–æ –Ω–µ QR –∫–æ–¥")
    await message.delete()
    await asyncio.sleep(1)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id+1)




############################################## { } ##############################################
@dp.message()
async def all(message: Message):

    await message.delete()
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º", reply_markup=kb_code_decode.make_inline())


async def main():

    await dp.start_polling(bot)
    await bot.delete_webhook(drop_pending_updates=True)

if __name__ == '__main__':
    asyncio.run(main())
